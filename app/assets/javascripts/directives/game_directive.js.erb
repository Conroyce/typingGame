app.directive("gameDirective", ["$timeout", "$interval", "$http", "images", "text", "Game", "User", 
  function($timeout, $interval, $http, images, text, Game, User) {
  return {
    templateUrl: "<%= asset_path('templates/directives/game_template.html') %>",
    link: function(scope, ele, attr) {

      var wordsLeft, total, current, timer, start, transPercent, trans, progBar, id, randomInd, i, remaining, initialRemaining, inc;
      // console.log(text.getAll, images.getAll);
      scope.text = text.getAll;
      scope.images = images.getAll;
      scope.user = angular.fromJson(localStorage.getItem('user'));
      // var data = text.getAll;
      // var images = images.getAll;
      
      var currentGame = -1;
      var currentNum = 1;
          i = 0;

      var dispPastAvg = function(arr) {
        var len = arr.length,
            parsedArr = [];

        arr.forEach(function(x) {
          parsedArr.push(parseInt(x));
        });

        var sum = parsedArr.reduce(function(prev,cur) {
          return prev + cur;
        });

        // console.log(sum, arr.length, parsedArr)
        return (sum/parsedArr.length).toFixed(1);
      }

      var dispPastScores = function() {
        if (localStorage.scores) {
          var arr,
              scoreArr = localStorage.scores.split(",");
          if (scoreArr.length > 11) {
            arr = scoreArr.slice(scoreArr.length-11, scoreArr.length-1);
            scope.pastAvg = dispPastAvg(arr);
            scope.pastScores = arr.reverse();
          } else {
            arr = scoreArr.slice(0,scoreArr.length-1);
            scope.pastAvg = dispPastAvg(arr)
            scope.pastScores = arr.reverse();  
          }
        } 
      };

      dispPastScores(); 

      //knuth's algorithm
      var uniqueNums = function(arr) {
        var sortedNums = [1,2,3,4,5,6,7,8,9,10,11,12],
            n = sortedNums.length,
            temp,
            randomNum;

        if (arr) {
          sortedNums = arr;
          n = sortedNums.length;
        }
        
        while (n > 1) {
          randomNum = Math.floor(Math.random() * n);
          n--;
          temp = sortedNums[n];
          sortedNums[n] = sortedNums[randomNum];
          sortedNums[randomNum] = temp;
        }
        return sortedNums;
      };

      var blockIds = uniqueNums();

      var incrementGame = function() {
        if (i + 1 === randomInd.length) {
          currentGame = randomInd[0];
          i++;
        } else {
          currentGame = randomInd[i];
          i++;
        }
        // reset current number count.
        currentNum = 1;
      }

      var setOrder = function() {
        var arr = [];
        for (var i = 0; i < scope.text.length; i++) {
          arr.push(i);
        }

        return uniqueNums(arr);
      };

      var calcWPM = function(words,time) {
        var adjust = 60/time;
        scope.wpm = Math.ceil(words * adjust);
      };

      var calcAccuracy = function(words, errors) {
        var correct = words - errors;
        var percent = (correct/words) * 100;
        scope.accuracy = Math.ceil(percent);
      };

      var calcTrans = function(words) {
        transPercent = 1/words;
      };

      var setCanvas = function() {
        scope.canvasImg = {
          'width':'100%',
          'height': '402px',
          'position': 'relative',
          'background': 'url('+scope.images[currentGame]+')',
          'background-size': 'cover'
        };
      };  

      // determine how many words need to be completed in order to hide a block
      var calcBlocks = function() {
        var text = scope.text[currentGame].split(" ");
        remaining = text.length % 12;
        initialRemaining = text.length % 12;
        inc = (text.length - remaining)/12;
      };

      var hideBlock = function(end) {
        var int = inc;
        // have base increment number, if there are remainders, we will increase increment number by 1.
        if (remaining) {
          int++;
        }

        console.log("inside hideBlock: ", blockIds, id, end, remaining, currentNum, int);
        if (currentNum % int == 0) {
          currentNum = remaining == 1 ? (currentNum - (int*initialRemaining)) : currentNum;
          remaining ? remaining-- : "";
          ele[0].querySelector('.b-'+blockIds[id]).style.opacity = "0";
          id++;
        } else if (end) {
          id--;
          ele[0].querySelector('.b-'+blockIds[id]).style.opacity = "0";
        }
        currentNum++;
      }

      var resetBlock = function() {
        for (var i = 1; i <= 12; i++) {
          ele[0].querySelector('.b-'+i).classList.remove('block');
          ele[0].querySelector('.b-'+i).style.opacity = "1";;
          ele[0].querySelector('.b-'+i).classList.add('block');
        }

        return {
          then : function(fn) {
            fn();
          }
        }
      };

      var resetBar = function() {
        scope.progressBar = {
          'width': '0%'
        };
      };
      
      var adjBar = function() {
        progBar += transPercent * 100;
        var progressStr = progBar.toString();
        scope.progressBar = {
          'width': progressStr + "%"
        };
      };

      var startTimer = function() {
        scope.resetGameButton = true;
        start = new Date();
        timer = $interval(function() {
          scope.time = ((new Date - start) / 1000).toFixed(1);
        });
      };

      var stopTimer = function() {
        $interval.cancel(timer);
      }

      var updateData = function() {
        current = wordsLeft.shift();
        scope.dataCompleted = scope.log.join(" ");
        scope.dataRemain = wordsLeft.join(" ");
        scope.dataCurrent = current;
      };

      scope.createDisplay = function() {
        transPercent = 0;
        progBar = 0;
        id = 0;
        trans = 1;
        scope.log = [];      
        scope.count = 0;
        scope.time = 0;
        scope.wpm = 0;
        scope.errors = 0;
        scope.gameStarted = false;
        scope.disable = true;
        scope.gameOver = false;
        scope.gameDisplay = true;
        updateData();
        resetBar();
        resetBlock().then(function() {
          // make sure transition to cover canvas has completed
          $timeout(function() {
            setCanvas();
          }, 300);  
        });
        // scope.$apply();
      };     

      var saveGame = function() {
        var game = new Game({
          score: scope.wpm,
          accuracy: scope.accuracy,
          user_id: scope.user.id
        });

        game.$save(function(resp) {
          console.log("saved ", resp);
        })
      };

      var addPastScore = function() {
        // console.log("wpm: ",scope.wpm);
        if (!localStorage.scores) {
          localStorage.scores = scope.wpm + ",";
          // console.log("first score: ", localStorage.scores);
        } else {
          localStorage.scores += scope.wpm + ",";
          // console.log("many scores: ", localStorage.scores);
        }

        if (scope.user) {
          // new highscore
          console.log("score ", scope.user.highScore, scope.wpm);
          if (!scope.user.highScore || scope.user.highScore < scope.wpm) {
            //update user with new highscore
            User.update({id: scope.user.id, highScore: scope.wpm}, function(resp) {
              console.log("resp ", resp);
              if (resp.status == "success") {
                alert("Congratulations! new high score");
                localStorage.setItem('user', angular.toJson(resp.data));
                scope.user = resp.data;
              }  
            });
          }
          // save game
          saveGame();
        }  

        dispPastScores();
      };   

      var textDisplay = function(cur, fail) {
        scope.cur = cur;
        scope.fail = fail;
      };     

      var ending = function() {
        var totalTime = (new Date - start)/1000;
        stopTimer();
        hideBlock(true);
        scope.ans = "";
        scope.disable = true;
        scope.gameOver = true;
        scope.gameDisplay = false;
        scope.resetGameButton = false;
        scope.gameStarted = false;
        textDisplay(false,false);
        calcWPM(scope.count,scope.time)
        calcAccuracy(scope.count,scope.errors)
        addPastScore();
      };

      var clearStartMes = function() {
        $timeout(function() {
          scope.countDown = "";
        }, 1000)
      };

      var dispGo = function() {
        scope.centerNumLet = true;
        scope.countDown = "Go!";
      };

      scope.resetRecent = function() {
        localStorage.clear();
        scope.pastScores = "";
        scope.pastAvg = 0;
      };

      scope.resetGame = function() {
        wordsLeft = scope.text[currentGame].split(" ");
        // setCanvas();
        stopTimer();
        scope.createDisplay();
        scope.centerNumLet = false;
        calcTrans(wordsLeft.length);
        textDisplay(false,false); 
        scope.resetGameButton = false;
        scope.current = "";
      }

      scope.startGame = function() {
        scope.gameStarted = true;
        scope.countDown = 5;
        //start countdown
        var dec = $interval(function() { 
          //if we reach 1
          if (scope.countDown === 1) {
            //stop countdown, start timer for typing game
            $interval.cancel(dec);
            dispGo();
            clearStartMes();
            scope.disable = false;
            textDisplay(true,false);
            startTimer();
            $timeout(function() {
              ele[0].querySelector('.text-type').focus();
            });  
          } else {
            scope.countDown--;
          }
        },1000);       
      };

      ele.bind("keydown", function(evt){
        //check if spacebar is pressed
        if (evt.keyCode == 32) {
          //if the last word has been entered correctly
          // console.log("current: ",current, "scope.ans: ", scope.ans); 
          if (current === scope.ans && total == scope.log.length) {
            hideBlock();
            stopTimer();
            ending();
          //if word is entered correctly 
          } else if (current === scope.ans) {  
            trans -= transPercent;
            // console.log("inside correct word")
            adjBar();
            scope.log.push(scope.ans);
            updateData();
            hideBlock();
            scope.ans = "";
            scope.count++;
            calcWPM(scope.log.length, (new Date - start)/1000)
            textDisplay(true,false);
          } else {
            scope.errors++;
            textDisplay(false,true);
          }
        } else if(current === scope.ans) {

          textDisplay(true,false);
        }        
      }); 

      scope.startOver = function() {
        // console.log("hideBlock",scope.text[currentGame], scope.text, currentGame, randomInd);
        wordsLeft = scope.text[currentGame].split(" ");
        total = wordsLeft.length - 1;
        scope.createDisplay();
        scope.centerNumLet = false;
        calcTrans(wordsLeft.length);
        textDisplay(false,false);
      };

      //initalizing function
      scope.startAgain = function(){
        incrementGame();
        // console.log("hideBlock",scope.text[currentGame], scope.text, currentGame);
        calcBlocks();
        wordsLeft = scope.text[currentGame].split(" ");
        total = wordsLeft.length - 1;
        scope.createDisplay();
        scope.centerNumLet = false;
        calcTrans(wordsLeft.length);
        textDisplay(false,false);   
      };

      randomInd = setOrder();
      scope.startAgain(); 

      // $http.get('chart.tracks.get?page=1&page_size=5&f_has_lyrics=1').then(function(data) {
      //   console.log('data', data);
      // })
    }
  }
}]);
