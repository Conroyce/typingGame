app.directive("gameDirective", ["$timeout", "$interval", "$http", function($timeout, $interval, $http) {
  return {
    templateUrl: "<%= asset_path('templates/directives/game_template.html') %>",
    link: function(scope, ele, attr) {
        
      var wordsLeft, total, current, timer, start, transPercent, trans, progBar;

      var data = "Today was beautiful. Not a cloud in the sky. We sat back and watched the day gracefully pass by. I slowly stretched my arms."
      var id = 1;
      var currentNum = 1;
      var len = data.split(" ").length;

      var calcWPM = function(words,time) {
        var adjust = 60/time;
        scope.wpm = Math.ceil(words * adjust);
      };

      var calcAccuracy = function(words, errors) {
        var correct = words - errors;
        var percent = (correct/words) * 100;
        scope.accuracy = Math.ceil(percent);
      };

      var calcTrans = function(words) {
        transPercent = 1/words;
      };

      scope.canvasImg = {
        'width':'100%',
        'height': '402px',
        'border': '10px solid black',
        'border-radius': '6px',
        'position': 'relative',
        'background': 'url("http://hdwallpaper.freehdw.com/0001/nature-landscapes_hdwallpaper_calm-lake_2022.jpg")',
        'background-size': 'cover'
      };

      var hideBlock = function() {
        // var id = Math.floor((Math.random()*12)+1);
        var inc = len/12;
        console.log("inc: ", inc, "currentNum: ", currentNum, "len: ", len, "id: ", id);
        if (currentNum % inc == 0) {
          console.log(id);
          ele[0].querySelector('.b-'+id).style.display="none";
          id++;
        }
        currentNum++;
      }

      var resetBar = function() {
        scope.progressBar = {
          'width': '0%'
        };
      };
      
      var adjBar = function() {
        progBar += transPercent * 100;
        var progressStr = progBar.toString();
        scope.progressBar = {
          'width': progressStr + "%"
        };
      };

      var startTimer = function() {
        start = new Date();
        timer = $interval(function() {
          scope.time = ((new Date - start) / 1000).toFixed(1);
        });
      };

      var stopTimer = function() {
        $interval.cancel(timer);
      }

      var updateData = function() {
        current = wordsLeft.shift();
        scope.dataCompleted = scope.log.join(" ");
        scope.dataRemain = wordsLeft.join(" ");
        scope.dataCurrent = current;
      };

      scope.createDisplay = function() {
        transPercent = 0;
        progBar = 0;
        trans = 1;
        scope.log = [];      
        scope.count = 0;
        scope.time = 0;
        scope.wpm = 0;
        scope.errors = 0;
        scope.gameStarted = false;
        scope.disable = true;
        scope.gameOver = false;
        scope.gameDisplay = true;
        updateData();
        resetBar();
      };        

      var textDisplay = function(cur, fail) {
        scope.cur = cur;
        scope.fail = fail;
      };     

      var ending = function() {
        var totalTime = (new Date - start)/1000;
        stopTimer();
        scope.ans = "";
        scope.disable = true;
        scope.gameOver = true;
        scope.gameDisplay = false;
        textDisplay(false,false);
        calcWPM(scope.count,scope.time)
        calcAccuracy(scope.count,scope.errors)
      };

      var clearStartMes = function() {
        $timeout(function() {
          scope.countDown = "";
        }, 1000)
      };

      scope.startGame = function() {
        scope.gameStarted = true;
        scope.countDown = 5;
        //start countdown
        var dec = $interval(function() { 
          //if we reach 1
          if (scope.countDown === 1) {
            //stop countdown, start timer for typing game
            $interval.cancel(dec);
            scope.countDown = "Go!";
            clearStartMes();
            scope.disable = false;
            textDisplay(true,false);
            startTimer();
            scope.$apply();
            ele[0].querySelector('.text-type').focus();
          } else {
            scope.countDown--;
          }
        },1000);       
      };

      ele.bind("keyup", function(evt){
        //check if spacebar is pressed
        if (evt.keyCode == 32) {
          //if the last word has been entered correctly
          console.log("current: ",current, "scope.ans: ", scope.ans); 
          if (current === scope.ans && total == scope.log.length) {
            hideBlock();
            stopTimer();
            ending();
          //if word is entered correctly 
          } else if (current === scope.ans) {  
            trans -= transPercent;
            console.log("inside correct word")
            adjBar();
            scope.log.push(scope.ans);
            updateData();
            hideBlock();
            scope.ans = "";
            scope.count++;
            calcWPM(scope.log.length, (new Date - start)/1000)
            textDisplay(true,false);
          } else {
            scope.errors++;
            textDisplay(false,true);
          }
          scope.$digest();
        } else if(current === scope.ans) {

          textDisplay(true,false);
        }        
      }); 

      //initalizing function
      scope.startAgain = function(){
        wordsLeft = data.split(" ");
        total = wordsLeft.length - 1;
        scope.createDisplay();
        calcTrans(wordsLeft.length);
        textDisplay(false,false);   
      };

      scope.startAgain(); 
    }
  }
}]);
