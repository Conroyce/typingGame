app.directive("gameDirective", ["$timeout", "$interval", "$http", function($timeout, $interval, $http) {
  return {
    templateUrl: "<%= asset_path('templates/directives/game_template.html') %>",
    link: function(scope, ele, attr) {
        
      var wordsLeft, total, current, timer, start, transPercent, trans, progBar, id;

      var data = [
        "'Hey man, you ready?', Steve exclaimed. I nodded. My body was shaking and my heart was pounding. I yelled 'Geranimo!!', and then jumped off.",
        "Craig watched the sunlight slowly fade away. He closed his eyes and relaxed his tensed shoulders. He felt himself slowly drift into the abyss.",
        "Today was beautiful. Not a cloud in the sky. We sat back and watched the day gracefully pass by. I slowly stretched my arms.",
        "We're no strangers to love. You know the rules and so do I. A full commitment's what I'm thinking of. You wouldn't get this from any other guy. I just wanna tell you how I'm feeling."
      ];
      var images = [
        "http://www.literallydarling.com/wp-content/uploads/2014/08/skydiving-fantastic.png",
        "https://s-media-cache-ak0.pinimg.com/originals/62/0f/d3/620fd37f23c145d6bb11d6e3382af92e.jpg",
        "http://hdwallpaper.freehdw.com/0001/nature-landscapes_hdwallpaper_calm-lake_2022.jpg",
        "http://i.ytimg.com/vi/smVn7L2sTmg/maxresdefault.jpg"
      ]
      var currentGame = -1;
      var currentNum = 1;
      // var len = data[currentGame].split(" ").length;

      var dispPastScores = function() {
        if (localStorage.scores) {
          var scoreArr = localStorage.scores.split(",");
          if (scoreArr.length > 11) {
            scope.pastScores = scoreArr.slice(scoreArr.length-11, scoreArr.length-1).reverse();
          } else {
            scope.pastScores = scoreArr.slice(0,scoreArr.length-1).reverse();  
          }
        } 
      };

      dispPastScores(); 

      //knuth's algorithm
      var uniqueNums = function() {
        var sortedNums = [1,2,3,4,5,6,7,8,9,10,11,12],
            n = sortedNums.length,
            temp,
            randomNum;
        
        while (n > 1) {
          randomNum = Math.floor(Math.random() * n);
          n--;
          temp = sortedNums[n];
          sortedNums[n] = sortedNums[randomNum];
          sortedNums[randomNum] = temp;
        }
        return sortedNums;
      };

      var blockIds = uniqueNums();

      var incrementGame = function() {
        if (currentGame + 1 === data.length) {
          currentGame = 0;
        } else {
          currentGame++;
        }
      }

      var calcWPM = function(words,time) {
        var adjust = 60/time;
        scope.wpm = Math.ceil(words * adjust);
      };

      var calcAccuracy = function(words, errors) {
        var correct = words - errors;
        var percent = (correct/words) * 100;
        scope.accuracy = Math.ceil(percent);
      };

      var calcTrans = function(words) {
        transPercent = 1/words;
      };

      var setCanvas = function() {
        scope.canvasImg = {
          'width':'100%',
          'height': '402px',
          'border': '10px solid black',
          'border-radius': '6px',
          'position': 'relative',
          'background': 'url('+images[currentGame]+')',
          'background-size': 'cover'
        };
      };  

      var hideBlock = function() {
        var inc = data[currentGame].split(" ").length/12;
        if (currentNum % inc == 0) {
          console.log("inside hideBlock: ", blockIds, id)
          ele[0].querySelector('.b-'+blockIds[id]).style.display="none";
          id++;
        }
        currentNum++;
      }

      var blockDisplay = function(num) {
        ele[0].querySelector('.b-'+num).style.display="inline";
      };

      var resetBlock = function() {
        for (var i = 1; i <= 12; i++) {
          blockDisplay(i);
        }
      };

      var resetBar = function() {
        scope.progressBar = {
          'width': '0%'
        };
      };
      
      var adjBar = function() {
        progBar += transPercent * 100;
        var progressStr = progBar.toString();
        scope.progressBar = {
          'width': progressStr + "%"
        };
      };

      var startTimer = function() {
        scope.resetGameButton = true;
        start = new Date();
        timer = $interval(function() {
          scope.time = ((new Date - start) / 1000).toFixed(1);
        });
      };

      var stopTimer = function() {
        $interval.cancel(timer);
      }

      var updateData = function() {
        current = wordsLeft.shift();
        scope.dataCompleted = scope.log.join(" ");
        scope.dataRemain = wordsLeft.join(" ");
        scope.dataCurrent = current;
      };

      scope.createDisplay = function() {
        transPercent = 0;
        progBar = 0;
        id = 0;
        trans = 1;
        scope.log = [];      
        scope.count = 0;
        scope.time = 0;
        scope.wpm = 0;
        scope.errors = 0;
        scope.gameStarted = false;
        scope.disable = true;
        scope.gameOver = false;
        scope.gameDisplay = true;
        resetBlock();
        updateData();
        resetBar();
        scope.$apply();
      };     

      var addPastScore = function() {
        console.log("wpm: ",scope.wpm);
        if (!localStorage.scores) {
          localStorage.scores = scope.wpm + ",";
          console.log("first score: ", localStorage.scores);
        } else {
          localStorage.scores += scope.wpm + ",";
          console.log("many scores: ", localStorage.scores);
        }
        dispPastScores();
      };   

      var textDisplay = function(cur, fail) {
        scope.cur = cur;
        scope.fail = fail;
      };     

      var ending = function() {
        var totalTime = (new Date - start)/1000;
        stopTimer();
        scope.ans = "";
        scope.disable = true;
        scope.gameOver = true;
        scope.gameDisplay = false;
        scope.resetGameButton = false;
        textDisplay(false,false);
        calcWPM(scope.count,scope.time)
        calcAccuracy(scope.count,scope.errors)
        addPastScore();
      };

      var clearStartMes = function() {
        $timeout(function() {
          scope.countDown = "";
        }, 1000)
      };

      var dispGo = function() {
        scope.centerNumLet = true;
        scope.countDown = "Go!";
      };

      scope.resetRecent = function() {
        localStorage.clear();
        scope.pastScores = ""
      };

      scope.resetGame = function() {
        wordsLeft = data[currentGame].split(" ");
        setCanvas();
        stopTimer();
        scope.createDisplay();
        scope.centerNumLet = false;
        calcTrans(wordsLeft.length);
        textDisplay(false,false); 
        scope.resetGameButton = false;
        scope.current = "";
      }

      scope.startGame = function() {
        scope.gameStarted = true;
        scope.countDown = 5;
        //start countdown
        var dec = $interval(function() { 
          //if we reach 1
          if (scope.countDown === 1) {
            //stop countdown, start timer for typing game
            $interval.cancel(dec);
            dispGo();
            clearStartMes();
            scope.disable = false;
            textDisplay(true,false);
            startTimer();
            scope.$apply();
            ele[0].querySelector('.text-type').focus();
          } else {
            scope.countDown--;
          }
        },1000);       
      };

      ele.bind("keyup", function(evt){
        //check if spacebar is pressed
        if (evt.keyCode == 32) {
          //if the last word has been entered correctly
          console.log("current: ",current, "scope.ans: ", scope.ans); 
          if (current === scope.ans && total == scope.log.length) {
            hideBlock();
            stopTimer();
            ending();
          //if word is entered correctly 
          } else if (current === scope.ans) {  
            trans -= transPercent;
            console.log("inside correct word")
            adjBar();
            scope.log.push(scope.ans);
            updateData();
            hideBlock();
            scope.ans = "";
            scope.count++;
            calcWPM(scope.log.length, (new Date - start)/1000)
            textDisplay(true,false);
          } else {
            scope.errors++;
            textDisplay(false,true);
          }
          scope.$digest();
        } else if(current === scope.ans) {

          textDisplay(true,false);
        }        
      }); 

      scope.startOver = function() {
        wordsLeft = data[currentGame].split(" ");
        total = wordsLeft.length - 1;
        setCanvas();
        scope.createDisplay();
        scope.centerNumLet = false;
        calcTrans(wordsLeft.length);
        textDisplay(false,false);
      };

      //initalizing function
      scope.startAgain = function(){
        incrementGame();
        wordsLeft = data[currentGame].split(" ");
        total = wordsLeft.length - 1;
        setCanvas();
        scope.createDisplay();
        scope.centerNumLet = false;
        calcTrans(wordsLeft.length);
        textDisplay(false,false);   
      };

      scope.startAgain(); 
    }
  }
}]);
