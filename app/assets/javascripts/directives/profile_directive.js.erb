app.directive("profileDirective", ["$timeout", "$interval", "$http", "User", "$location", "Session", "Game", 
	function($timeout, $interval, $http, User, $location, Session, Game) {
		return {
			templateUrl: "<%= asset_path('templates/directives/profile_template.html') %>",
			link: function(scope, ele, attr) {
				scope.toggleTheme = function() {
					console.log("toggle", scope.day);
					if (!scope.night) {
						scope.night = true;
						$('body').addClass('night');
					} else {
						scope.night = false;
						$('body').removeClass('night');
					}
				};

				scope.user = angular.fromJson(localStorage.user);
				Game.get({user_id:scope.user.id}, function(resp) {
					resp.data.forEach(function(v) { v.accuracy = parseFloat(v.accuracy); });
					var data = resp.data;
					scope.data = data;
					console.log("Games ", data);

					var hexToRgb = function(hex) {
				    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
				    return result ? "rgb(" +
				        parseInt(result[1], 16) + ", " +
				        parseInt(result[2], 16) + ", " +
				        parseInt(result[3], 16) + ")"
				      : null;
					};

					var margin = {top: 50, right: 50, bottom: 55, left: 55},
					    width = parseInt(d3.select('#graph-container').style('width'), 10),
					    width = width - margin.left - margin.right,
					    percent = d3.format('%'),
					    height = 500 - margin.top - margin.bottom;

					// var formatDate = d3.time.format("%d-%b-%y");
					var color = d3.scale.category20();

					var x = d3.time.scale()
					    .range([0, width]);

					var y = d3.scale.linear()
					    .range([height, 0]);

					var xAxis = d3.svg.axis()
					    .scale(x)
					    .orient("bottom")
					    .tickFormat(d3.format(",.0f"));

					var yAxis = d3.svg.axis()
					    .scale(y)
					    .orient("left");

					var green = "rgb(152,223,138)";
					var orange = "rgb(255, 127, 14)";

					var graph = function(el,color, type, text) {
						var line = d3.svg.line()
						    .x(function(d) { return x(d.id); })
						    .y(function(d) { return y(d[type]); });

						var tip = d3.tip()
						  .attr('class', 'd3-tip')
						  .html(function(d) { return '<p><span class="orange">Accuracy: </span>' + d.accuracy + '%</p><span class="green">WPM: </span>' + d.score; })    

						var svg = d3.select(el).append("svg")
						    .attr("width", width + margin.left + margin.right)
						    .attr("height", height + margin.top + margin.bottom)
						  .append("g")
						    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
						    .call(tip);

						  // Add the valueline path.
						  // svg.append("path")
						  //   .attr("class", "line")
						  //   .attr("d", valueline(data));

						  x.domain(d3.extent(data, function(d) { return d.id; }));
						  y.domain(d3.extent(data, function(d) { return d[type]; }));

						  svg.append("g")
						      .attr("class", "x axis")
						      .attr("transform", "translate(0," + height + ")")
						      .call(xAxis) 
						    .append("text")
						      .attr("x", 20)
						      .attr("dy", "3em")
						      .attr("dx", "45%")
						      .style("text-anchor", "middle")
						      .text("Game");  
						    

						  svg.append("g")
						      .attr("class", "y axis")
						      .call(yAxis)
						    .append("text")
						      .attr("transform", "rotate(-90)")
						      .attr("y", 6)
						      .attr("dy", ".71em")
						      .style("text-anchor", "end")
						      .text(text);

						  svg.append("path")
						      .datum(data)
						      .attr("class", "line")
						      .attr("d", line);

						  svg.selectAll('circle')
						    .data(data)
						    .enter().append('circle')
						    .attr('cx', function(d) {
						      return x(d.id);
						    })
						    .attr('cy', function(d) {
						      return y(d[type]);
						    })
						    .attr('r', 5)
						    // .attr('data-toggle','tooltip')
						    // .attr('data-placement','top')
						    // .attr('title','test')
						    .attr('class', 'node')
						    .style('fill', color)
						    .on('mouseover', tip.show)
						    .on('mouseout', tip.hide);

					};

					// only display if user has had at least 5 games
					if (data.length >= 5) {
						graph('#wpm', green, 'score', 'WPM');
						graph('#accuracy', orange, 'accuracy', 'Accuracy(%)');
					}

					$(function () {
					  $('[data-toggle="tooltip"]').tooltip({
					  	'container':'body',
					  	'placement':'top'
					  });
					});
				});
			}
		}
	}]);	